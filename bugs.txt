COMPILER

Overall

  - what about overloading (typeclasses, abstract classes, oh my!)
  - doesn't give error if user tries to define "true" or any other root function

Parser

  - can't parse floats or chars
    - use RegexParsers to make custom scanner
      - error messages will be hard
      - give location info to tokens, if possible
        - maybe use scala.io.Source (has fromString method)
    - then use custom scanner in existing parser
  - unary "not"s aren't parsed right

Simplifier

  - turns definition of fac into IfExpr(Call(==,List(Call(n,List()), IntLit(1))),Call(==,List(Call(n,List()), IntLit(1))),Call(==,List(Call(n,List()), IntLit(1))))

Callgraph

  - calls TypeCheck.apply(List[Def]), which doesn't exist. Don't know why Scala compiler didn't catch this.
