diff --git a/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_ast_$_AST.scala b/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_ast_$_AST.scala
index 565d274..71e3294 100644
Binary files a/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_ast_$_AST.scala and b/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_ast_$_AST.scala differ
diff --git a/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_test.scala b/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_test.scala
index 64697aa..3101cde 100644
Binary files a/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_test.scala and b/.manager/_$_Users_$_petevilter_$_Dropbox_$_code_$_vmlang_$_src_$_vmlang_$_compiler_$_test.scala differ
diff --git a/src/vmlang/common/Opcodes.java b/src/vmlang/common/Opcodes.java
index 8114948..aab0c7e 100644
--- a/src/vmlang/common/Opcodes.java
+++ b/src/vmlang/common/Opcodes.java
@@ -1,45 +1,47 @@
 package vmlang.common;
 
 public enum Opcodes {
-    
+
 	STOP,
-    GOTO,
-    GOTO_A,
-    IF_EQ,
-    IF_LT,
-    I_CONST_A,
-    I_CONST_B,
-    B_CONST_A,
-    B_CONST_B,
-    I_LOAD_A_SP,
-    I_LOAD_B_SP,
+	GOTO,
+	GOTO_A,
+	IF_EQ,
+	IF_LT,
+	I_CONST_A,
+	I_CONST_B,
+	B_CONST_A,
+	B_CONST_B,
+	I_LOAD_A_SP,
+	I_LOAD_B_SP,
 	I_LOAD_SP_SP,
-    B_LOAD_A_SP,
-    B_LOAD_B_SP,
-    I_STORE_A_SP,
-    B_STORE_A_SP,
-    MOVE_COUNTER_A,
-    MOVE_SP_A,
-    MOVE_BP_A,
-    MOVE_A_SP,
-    MOVE_A_BP,
-    I_ADD,
-    I_SUB,
-    I_MUL,
-    I_DIV,
-    I_MOD,
-    INC_A,
-    INC_B,
-    INC_SP,
-    DEC_A,
-    DEC_B,
-    DEC_SP,
-    NEG_A,
-    AND,
-    OR,
-    PRINT_CHAR_A;
-    
-    public byte toByte() {
-    	return (byte)ordinal();
-    }
+	B_LOAD_A_SP,
+	B_LOAD_B_SP,
+	I_STORE_A_SP,
+	B_STORE_A_SP,
+	MOVE_COUNTER_A,
+	MOVE_SP_A,
+	MOVE_BP_A,
+	MOVE_A_SP,
+	MOVE_A_BP,
+	I_ADD,
+	I_SUB,
+	I_MUL,
+	I_DIV,
+	I_MOD,
+	INC_A,
+	INC_B,
+	INC_SP,
+	DEC_A,
+	DEC_B,
+	DEC_SP,
+	NEG_A,
+	NEG_LT_A,
+	AND,
+	OR,
+	PRINT_CHAR_A,
+	READ_CHAR_A;
+
+	public byte toByte() {
+		return (byte)ordinal();
+	}
 }
diff --git a/src/vmlang/compiler/Compiler.scala b/src/vmlang/compiler/Compiler.scala
index fb52ea0..f91b562 100644
--- a/src/vmlang/compiler/Compiler.scala
+++ b/src/vmlang/compiler/Compiler.scala
@@ -1,20 +1,47 @@
-package vmlang.compiler
-
-import vmlang.compiler.ast._
-import vmlang.compiler.icode._
-import collection.immutable.HashMap
-
-object Compiler {
-  
-  def apply(prog:Prog) = {
-    prog.defs.foldLeft(new HashMap[String,List[IOpcode]]){
-               (map,funcDef) => (map + (funcDef.name -> compile(funcDef)))
-                   .asInstanceOf[HashMap[String,List[IOpcode]]] }
-                   // don't know why that !@$!@ "asInstanceOf" is necessary...
-  }
-  
-  def compile(funcDef:Def) = {
-    compileExpr(funcDef.body)
-  }
-  
-}
+// package vmlang.compiler
+// 
+// import vmlang.compiler.ast._
+// import collection.immutable.HashMap
+// 
+// object Compiler {
+//   
+//   def apply(prog:Prog) = {
+//     prog.defs.foldLeft(new HashMap[String,List[IOpcode]]){
+//                (map,funcDef) => (map + (funcDef.name -> compile(funcDef)))
+//                    .asInstanceOf[HashMap[String,List[IOpcode]]] }
+//                    // don't know why that !@$!@ "asInstanceOf" is necessary...
+//   }
+//   
+//   def compile(funcDef:Def) = {
+//     compExpr(funcDef.body)
+//   }
+//   
+//   def compExpr(e:Expr):List[IOpcode] = e match {
+//     
+//     case Call("+",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(AddI())
+//     case Call("-",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(SubI())
+//     case Call("*",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(MultI())
+//     case Call("/",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(DivI())
+//     
+//     case Call("==",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(CmpEq())
+//     case Call("!=",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(CmpNeq())
+//     case Call(">",List(a,b))  => compExpr(a) ::: compExpr(b) ::: List(CmpGt())
+//     case Call(">=",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(CmpGte())
+//     case Call("<",List(a,b))  => compExpr(a) ::: compExpr(b) ::: List(CmpLt())
+//     case Call("<=",List(a,b)) => compExpr(a) ::: compExpr(b) ::: List(CmpLte())
+//     
+//     case Call("true",_) => List(PushConstI(1))
+//     case Call("false",_) => List(PushConstI(0))
+//     
+//     case Call("printChar",List(e)) => compExpr(e) ::: List(PrintChar())
+//     case Call("readChar",_) => List(ReadChar())
+//     
+//     case Integer(v) => List(PushConstI(v))
+//     case Char(c) => List(PushConstC(c))
+//     
+//     case IfExpr(c,i,e) => { val el = compExpr(e)
+//                             compExpr(c) ::: List(GotoIf(el.head)) ::: compExpr(i) ::: el }
+//     
+//   }
+//   
+// }
diff --git a/src/vmlang/compiler/ICode.scala b/src/vmlang/compiler/ICode.scala
index d2fe959..6c215b0 100644
--- a/src/vmlang/compiler/ICode.scala
+++ b/src/vmlang/compiler/ICode.scala
@@ -1,7 +1,34 @@
-package vmlang.compiler.icode
+package vmlang.compiler
 
 // intermediate code: source > intermediate code > { MiniVM, JVM, x86 ... } 
 
 abstract class IOpcode
 
-case class PushConstant(v:Int) extends IOpcode
\ No newline at end of file
+class Stop() extends IOpcode
+class Goto(a:Int) extends IOpcode
+class GotoFunc(f:String) extends IOpcode
+class GotoIf(ref:IOpcode) extends IOpcode
+class RetI() extends IOpcode
+
+class PushConstI(c:Int) extends IOpcode
+class PushConstC(c:Char) extends IOpcode
+
+class AddI() extends IOpcode
+class SubI() extends IOpcode
+class MultI() extends IOpcode
+class DivI() extends IOpcode
+
+class CmpEq(ref:IOpcode) extends IOpcode
+class CmpNeq(ref:IOpcode) extends IOpcode
+class CmpGt(ref:IOpcode) extends IOpcode
+class CmpGte(ref:IOpcode) extends IOpcode
+class CmpLt(ref:IOpcode) extends IOpcode
+class CmpLte(ref:IOpcode) extends IOpcode
+
+class Neg() extends IOpcode
+class NegLt() extends IOpcode
+class And() extends IOpcode
+class Or() extends IOpcode
+
+class PrintChar() extends IOpcode
+class ReadChar() extends IOpcode
diff --git a/src/vmlang/compiler/ast/AST.scala b/src/vmlang/compiler/ast/AST.scala
index 5e7c84b..7caa0f0 100644
--- a/src/vmlang/compiler/ast/AST.scala
+++ b/src/vmlang/compiler/ast/AST.scala
@@ -3,12 +3,11 @@ package vmlang.compiler.ast
 abstract class ASTNode
 
 case class Prog(defs:List[Def]) extends ASTNode
-case class Def(name:String, args:Option[List[ArgSpec]],
-               returnType:Option[Type], body:Expr) extends ASTNode
+case class Def(name:String, args:List[ArgSpec],
+               returnType:Type, body:Expr) extends ASTNode
 case class ArgSpec(name:String, argType:Type) extends ASTNode
 case class Type(name:String,params:Option[List[Type]]) extends ASTNode
 
-
 abstract class Expr extends ASTNode
 
 case class IfExpr(condition:Expr, ifExpr:Expr, thenExpr:Expr) extends Expr
@@ -16,6 +15,7 @@ case class Call(name:String, args:List[Expr]) extends Expr
 
 abstract class Atom extends Expr
 
-case class Integer(value:String) extends Atom
+case class Integer(value:BigInt) extends Atom
 case class Char(value:Char) extends Atom
-case object EmptyList extends Atom
\ No newline at end of file
+case object EmptyList extends Atom
+
diff --git a/src/vmlang/compiler/ast/Parser.scala b/src/vmlang/compiler/ast/Parser.scala
index 71a51bf..1751eb2 100644
--- a/src/vmlang/compiler/ast/Parser.scala
+++ b/src/vmlang/compiler/ast/Parser.scala
@@ -12,8 +12,9 @@ object Parser extends StandardTokenParsers {
   
   def program = (definition *) ^^ { l => Prog(l) }
   
-  def definition = ident ~ (argsSpec?) ~ (typeSpec?) ~ ("=" ~> expr) ^^ {
-                                              case i ~ as ~ rt ~ e => Def(i,as,rt,e) }
+  def definition = ident ~ (argsSpec?) ~ typeSpec ~ ("=" ~> expr) ^^ {
+                                              case i ~ Some(as) ~ rt ~ e => Def(i,as,rt,e)
+                                              case i ~ None ~ rt ~ e => Def(i,Nil,rt,e) }
   
   def argsSpec = "(" ~> repsep(argSpec, ",") <~ ")"
   
@@ -40,7 +41,7 @@ object Parser extends StandardTokenParsers {
                       "==" ^^^ { (a:Expr, b:Expr) => Call("==",List(a,b)) } |
                       "<=" ^^^ { (a:Expr, b:Expr) => Call("<=",List(a,b)) } |
                       ">=" ^^^ { (a:Expr, b:Expr) => Call(">=",List(a,b)) } |
-                      "!=" ^^^ { (a:Expr, b:Expr) => Call("!",List(Call("==",List(a,b)))) } )
+                      "!=" ^^^ { (a:Expr, b:Expr) => Call("!",List(a,b)) } )
                       // I'm sure there's a super-elegant way to do this,
                         // but my Scala chops aren't up to it yet
   
@@ -61,9 +62,9 @@ object Parser extends StandardTokenParsers {
   
   def unaryNot:Parser[Expr] = "!" ~> atom ^^ { a => Call("!",List(a)) }
   
-  def unaryMinus:Parser[Expr] = "-" ~> atom ^^ { a => Call("*",List(a,Integer("-1"))) }
+  def unaryMinus:Parser[Expr] = "-" ~> atom ^^ { a => Call("*",List(a,Integer(BigInt(-1)))) }
   
-  def number = numericLit ^^ { s => Integer(s) }
+  def number = numericLit ^^ { s => Integer(BigInt(s)) }
   
   def call = ident ~ (args ?) ^^ { case i ~ Some(a) => Call(i,a)
                     case i ~ None => Call(i,List()) }
diff --git a/src/vmlang/compiler/test.scala b/src/vmlang/compiler/test.scala
index 843fd84..8a7bd91 100644
--- a/src/vmlang/compiler/test.scala
+++ b/src/vmlang/compiler/test.scala
@@ -1,20 +1,8 @@
 package vmlang.compiler
 
-import scala.util.parsing.combinator.syntactical._
-import vmlang.compiler.ast._
-import collection.immutable.HashMap
-
-import java.util.Scanner
-
 object Test extends Application {
-  val s = new Scanner(System.in)
-  print("> ")
-  while(s.hasNext) {
-    try {
-      println(Parser(s.nextLine))
-    } catch {
-      case e:IllegalArgumentException => println(e.getMessage)
-    }
-    print("> ")
-  }
+  val t = TypeTree("Value",List(TypeTree("Num",List(TypeTree("Int",Nil),TypeTree("Float",Nil)))))
+  println(t prettyPrint)
+  println(t.complies("Value","Int"))
+  println(t.complies("Value","Floob"))
 }
diff --git a/src/vmlang/vm/VM.java b/src/vmlang/vm/VM.java
index 6ab6829..be94bf8 100644
--- a/src/vmlang/vm/VM.java
+++ b/src/vmlang/vm/VM.java
@@ -1,5 +1,7 @@
 package vmlang.vm;
 
+import java.io.IOException;
+
 import vmlang.common.Opcodes;
 
 public class VM {
@@ -149,6 +151,11 @@ public class VM {
 					else
 						A = 0;
 					break;
+				case NEG_LT_A:
+					if(A < 0)
+						A = 1;
+					else
+						A = 0;
 				case AND:
 					if(A != 0 && B != 0)
 						A = 1;
@@ -162,9 +169,17 @@ public class VM {
 						A = 0;
 					break;
 				
+				// io
 				case PRINT_CHAR_A:
 					System.out.print((char)A);
 					break;
+				case READ_CHAR_A:
+					try {
+						A = System.in.read();
+					} catch(IOException e) {
+						System.out.println(e.getMessage());
+					}
+					break;
 			}
 		}
 	}
